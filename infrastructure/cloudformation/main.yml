AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Lambda function deployment"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

  LambdaS3Bucket:
    Type: String
    Description: S3 bucket containing Lambda deployment package

  LambdaS3Key:
    Type: String
    Description: S3 key for the Lambda deployment package

Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Environment}-data-engineering-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${LambdaS3Bucket}"
                  - !Sub "arn:aws:s3:::${LambdaS3Bucket}/*"

  # Lambda function for data processing
  DataEngineeringFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Environment}-data-engineering"
      Description: "Lambda function for data engineering tasks"
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Environment:
        Variables:
          ENV: !Ref Environment
          LOG_LEVEL: INFO
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: "DataEngineering"

  # CloudWatch Log Group for Lambda function logs
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DataEngineeringFunction}"
      RetentionInDays: 30

  # Lambda Function Permission for API Gateway
  LambdaApiPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref DataEngineeringFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  # API Gateway for Lambda function
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${Environment}-data-engineering-api"
      Description: "API Gateway for Data Engineering Lambda"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Resource and Method
  ApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "process"

  ApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataEngineeringFunction.Arn}/invocations"

  # API Deployment
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref DataEngineeringFunction

  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt DataEngineeringFunction.Arn

  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/process"
