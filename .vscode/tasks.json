{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "üîß Setup Dev Environment",
            "detail": "Set up the development environment with dependencies and pre-commit hooks",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/setup_dev_environment.sh",
            "windows": {
                "command": "${workspaceFolder}/scripts/setup_dev_environment.ps1"
            },
            "presentation": {
                "reveal": "always",
                "panel": "new",
                "focus": true
            },
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "üß™ Run Tests",
            "detail": "Run all project tests with pytest",
            "type": "shell",
            "command": "python -m pytest",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "problemMatcher": {
                "owner": "python",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}"
                ],
                "pattern": {
                    "regexp": "^(.+):(\\d+):\\s+(\\w+):\\s+(.+)$",
                    "file": 1,
                    "line": 2,
                    "severity": 3,
                    "message": 4
                }
            }
        },
        {
            "label": "üìä Run Tests with Coverage",
            "detail": "Run tests with coverage report",
            "type": "shell",
            "command": "python -m pytest --cov=src --cov-report=term --cov-report=html",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "group": "test",
            "problemMatcher": {
                "owner": "python",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}"
                ],
                "pattern": {
                    "regexp": "^(.+):(\\d+):\\s+(\\w+):\\s+(.+)$",
                    "file": 1,
                    "line": 2,
                    "severity": 3,
                    "message": 4
                }
            }
        },
        {
            "label": "üß™ Run Current Test File",
            "detail": "Run the currently active test file",
            "type": "shell",
            "command": "python -m pytest ${relativeFile} -v",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "group": "test",
            "problemMatcher": {
                "owner": "python",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}"
                ],
                "pattern": {
                    "regexp": "^(.+):(\\d+):\\s+(\\w+):\\s+(.+)$",
                    "file": 1,
                    "line": 2,
                    "severity": 3,
                    "message": 4
                }
            }
        },
        {
            "label": "üßπ Format Code",
            "detail": "Run ruff formatter on project files",
            "type": "shell",
            "command": "ruff format .",
            "presentation": {
                "reveal": "silent",
                "panel": "shared"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üîç Check Linting",
            "detail": "Run linting checks with ruff",
            "type": "shell",
            "command": "ruff check .",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": {
                "owner": "python",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}"
                ],
                "pattern": {
                    "regexp": "^(.+):(\\d+):(\\d+):\\s+([EFW]\\d+)\\s+(.+)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "code": 4,
                    "message": 5
                }
            },
            "group": "none"
        },
        {
            "label": "üõ†Ô∏è Fix Linting",
            "detail": "Auto-fix linting issues with ruff",
            "type": "shell",
            "command": "ruff check --fix .",
            "presentation": {
                "reveal": "silent",
                "panel": "shared"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "‚úÖ Run Pre-commit",
            "detail": "Run all pre-commit hooks",
            "type": "shell",
            "command": "pre-commit run --all-files",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": {
                "owner": "python",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}"
                ],
                "pattern": {
                    "regexp": "^(.+):(\\d+):(\\d+):\\s+([\\w\\d]+)\\s+(.+)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "code": 4,
                    "message": 5
                }
            },
            "group": "none"
        },
        {
            "label": "üìñ Serve Documentation",
            "detail": "Build and serve project documentation",
            "type": "shell",
            "command": "mkdocs serve",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üìñ Build Documentation",
            "detail": "Build project documentation",
            "type": "shell",
            "command": "mkdocs build",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üèóÔ∏è Build Package",
            "detail": "Build Python package",
            "type": "shell",
            "command": "python -m build",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": [],
            "group": "build"
        },
        {
            "label": "‚ôªÔ∏è Clean Project",
            "detail": "Remove build artifacts and cache files",
            "type": "shell",
            "command": "rm -rf dist build .pytest_cache .ruff_cache .coverage htmlcov && find . -type d -name __pycache__ -exec rm -rf {} +",
            "windows": {
                "command": "if exist dist rd /s /q dist & if exist build rd /s /q build & if exist .pytest_cache rd /s /q .pytest_cache & if exist .ruff_cache rd /s /q .ruff_cache & if exist .coverage del .coverage & if exist htmlcov rd /s /q htmlcov & for /d /r . %%d in (__pycache__) do @if exist \"%%d\" rd /s /q \"%%d\""
            },
            "presentation": {
                "reveal": "always"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üîÑ Update Dependencies",
            "detail": "Update project dependencies",
            "type": "shell",
            "command": "python -m pip install -e .[dev,test,docs] --upgrade",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üìã Project Health Check",
            "detail": "Run tests, linting, and build checks",
            "type": "shell",
            "command": "python scripts/project_health_dashboard.py",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated",
                "focus": true
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üê≥ Start Docker Environment",
            "detail": "Start containers defined in docker-compose.yml",
            "type": "shell",
            "command": "docker-compose up -d",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": [],
            "group": "none"
        },
        {
            "label": "üê≥ Stop Docker Environment",
            "detail": "Stop Docker containers",
            "type": "shell",
            "command": "docker-compose down",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": [],
            "group": "none"
        }
    ]
}
