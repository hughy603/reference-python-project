name: CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - test
          - prod

env:
  PYTHON_VERSION: '3.12'
  HATCH_VERSION: '1.9.0'
  TERRAFORM_VERSION: '1.5.7'

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  publish-package:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }}

      - name: Build package
        run: hatch build

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  publish-container:
    name: Publish Container
    runs-on: ubuntu-latest
    needs: [determine-environment]
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=long
            type=raw,value=${{ env.ENVIRONMENT }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [determine-environment]
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform/${{ env.ENVIRONMENT }}
          terraform init

      - name: Terraform Plan
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform/${{ env.ENVIRONMENT }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform/${{ env.ENVIRONMENT }}
          terraform apply -auto-approve tfplan

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }}

      - name: Generate documentation
        run: |
          hatch -e docs run generate

      - name: Deploy documentation
        run: |
          hatch -e docs run deploy
