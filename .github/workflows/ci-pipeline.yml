name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  HATCH_VERSION: '1.9.0'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }}

      - name: Run linting
        run: hatch run lint:style

      - name: Run type checking
        run: hatch run lint:type

      - name: Check formatting
        run: hatch run ruff format --check .

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }} pip-audit bandit

      - name: Check for vulnerable dependencies
        run: pip-audit

      - name: Run security scanning
        run: |
          bandit -r src/ -c pyproject.toml

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }}

      - name: Run tests
        run: hatch run test:cov

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  infrastructure:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.47.0

      - name: Init TFLint
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform
          tflint --init

      - name: Run TFLint
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform
          tflint -f compact

      - name: Terraform Format Check
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Terraform Validate
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform
          terraform init -backend=false
          terraform validate

  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    needs: [tests, security]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: enterprise-data-engineering:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }}

      - name: Generate documentation
        run: |
          hatch -e docs run generate

      - name: Build documentation
        run: |
          hatch -e docs run build

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/
          retention-days: 7
