[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "enterprise-data-engineering"
version = "0.1.0"
description = "Enterprise Data Engineering Reference Project"
authors = [
  { name = "Enterprise Data Engineering Team", email = "data-engineering@example.com" },
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "boto3>=1.34.0",
  "pandas>=2.2.0",
  "pyarrow>=15.0.0",
  "pydantic>=2.6.1",
  "pyyaml>=6.0.1",
  "rich>=13.7.0",
  "typer>=0.9.0",
  "structlog>=24.1.0",
  "typing-extensions>=4.9.0", # For backporting Python 3.12 features
]

[project.optional-dependencies]
dev = [
  "pre-commit>=3.6.0",
  "ruff>=0.3.0",
  "build>=1.0.3",
  "ipython>=8.18.1",
  "pip-audit>=2.6.1",
  "pyright>=1.1.350",
  "mypy>=1.8.0",
  "tox>=4.11.3",
  "pyupgrade>=3.15.0",
  "bandit>=1.7.5",
  "radon>=6.0.1",
  # Test dependencies
  "pytest>=7.4.4",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.12.0",
  "hypothesis>=6.98.0",
  "pytest-xdist>=3.5.0",
  "coverage>=7.3.2",
  "moto>=4.2.0",
  # Documentation dependencies
  "mkdocs>=1.5.3",
  "mkdocs-material>=9.4.0",
  "mkdocstrings[python]>=0.23.0",
  "pymdown-extensions>=10.3.1",
  "pygments>=2.16.1",
]

# Specialized dependency groups
nexus = ["requests>=2.31.0", "tomli>=2.0.1", "tomli-w>=1.0.0", "twine>=4.0.2"]

dashboard = [
  "rich>=13.7.0",
  "mkdocs>=1.5.3",
  "pytest>=7.4.4",
  "pytest-cov>=4.1.0",
  "ruff>=0.3.0",
  "pre-commit>=3.6.0",
  "pip-audit>=2.6.1",
]

[project.urls]
"Documentation" = "https://example.com/docs"
"Source" = "https://github.com/example/enterprise-data-engineering"
"Issue Tracker" = "https://github.com/example/enterprise-data-engineering/issues"

[tool.hatch.build]
packages = ["src/enterprise_data_engineering"]
exclude = ["tests/**"]

[tool.hatch.build.targets.wheel]
packages = ["src/enterprise_data_engineering"]

# Consolidated environments
[tool.hatch.envs.default]
python = "3.12"
dependencies = [".[dev]"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["ruff>=0.3.0", "pyright>=1.1.350"]

[tool.hatch.envs.lint.scripts]
style = ["ruff check {args:.}", "ruff format --check {args:.}"]
fmt = ["ruff check --fix {args:.}", "ruff format {args:.}"]
type = "pyright {args:src tests}"
all = ["fmt", "type"]
validate = "echo 'Running linting validation'"

[tool.hatch.envs.test]
dependencies = [".[dev]"]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
cov = "pytest --cov=src --cov-report=term --cov-report=xml {args:tests}"

[tool.hatch.envs.docs]
dependencies = [".[dev]"]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve -a localhost:8080 {args}"
generate = [
  "python scripts/generate_api_docs.py",
  "python scripts/generate_terraform_docs.py",
]
deploy = "mkdocs gh-deploy --force"

[tool.ruff]
# Exclude directories and files
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Same as Black
line-length = 100
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Select and ignore specific rules
select = ["E", "F", "B", "UP", "N", "W", "I", "C4", "PT", "RUF", "SIM", "PLR"]
ignore = [
  "E741",    # Ambiguous variable names like I, O
  "N818",    # Exception names without Error suffix
  "PLR0913", # Too many arguments in function definition
  "PLR0912", # Too many branches
  "PLR2004", # Magic numbers
  "B904",    # Use 'raise from' in except blocks
  "E501",    # Line too long
  "UP038",   # Use X | Y in isinstance instead of (X, Y)
  "SIM102",  # Use a single if statement instead of nested if
  "SIM117",  # Use with multiple contexts instead of nested with
  "B008",    # Do not perform function call in argument defaults
]

[tool.ruff.lint.per-file-ignores]
# Ignore specific errors in test files
"tests/**/*.py" = [
  "PLR2004", # Magic numbers allowed in tests
  "S101",    # Use of assert in tests
  "S105",    # Potential hardcoded password
  "S106",    # Potential hardcoded password
  "S107",    # Potential hardcoded password
]
"examples/**/*.py" = [
  "PLR2004", # Magic numbers allowed in examples
  "T201",    # Print statements allowed in examples
]

[tool.ruff.lint.isort]
known-first-party = ["enterprise_data_engineering"]

[tool.ruff.lint.pep8-naming]
# Allow lowercase variables to have the same name as builtins (e.g., id, type)
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
]
ignore-names = ["id", "type", "format"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = ["Test*", "*Test"]
python_functions = ["test_*"]
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources.*",
  "ignore::DeprecationWarning:distutils.*",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration (deselect with '-m \"not integration\"')",
  "aws: marks tests that use aws resources (deselect with '-m \"not aws\"')",
]
addopts = "--strict-markers -v"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["moto.*", "boto3.*", "pytest_mock.*", "setuptools.*"]
ignore_missing_imports = true

[tool.pyright]
include = ["src", "tests"]
exclude = [
  "**/__pycache__",
  "**/.mypy_cache",
  "**/.pytest_cache",
  "**/.ruff_cache",
  ".git",
  ".tox",
  ".venv",
  "dist",
  "build",
  "node_modules",
]
reportMissingImports = "warning"
reportMissingTypeStubs = "warning"
pythonVersion = "3.11"
typeCheckingMode = "basic"

[tool.bandit]
exclude_dirs = ["tests", "examples", ".venv", "dist", "build"]
skips = ["B404", "B603", "B607"]
# B404: Import of subprocess module (low severity, reviewed)
# B603: subprocess without shell=True (low severity, reviewed)
# B607: Start process with partial executable path (low severity, reviewed)

targets = ["src"]
